
/**
 * Write a description of class Huffman here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
import java.util.*;
public class Huffman
{
    // instance variables - replace the example below with your own
    public Huffman(){
        String q = "ABA11$A";
        ArrayList<Node> tuff = new ArrayList<Node>();
        tuff = findfreq(q);
        Node root = new Node(null,0);
        Tree tree = new Tree();
        root = extract(tuff);
        HashMap<String,String> vals = new HashMap<String,String>();
        String code = "";
        tree.huffcode(root, vals, code);
        System.out.println(vals);
        String fin ="";
        String x = q;
        x = x.toLowerCase();
        for(int i=1; i<x.length(); i++){
            String c = x.substring(i-1, i);
            fin += vals.get(c);
        }
        System.out.println(fin);
    }

    public ArrayList<Node> findfreq(String s){
        ArrayList<String> t = new ArrayList<String>();
        ArrayList<Integer> h = new ArrayList<Integer>();
        ArrayList<Node> tuff = new ArrayList<Node>();
        s = s.toLowerCase();
        for(int i=0; i< s.length(); i++){
            int count =1;
            char c = s.charAt(i);
            for(int b=i+1; b<s.length(); b++){
                char d = s.charAt(b);
                if (d ==c){
                    count++;
                }
            }
            if (Character.toString(c).equals(" ")){
                System.out.print("");
            }
            else{
                //System.out.println("Char:" + c + " freq: " + count);
                t.add(c +"");
                h.add(count);
            }
            s = s.replaceAll(Character.toString(c), " ");
        }
        sort(t,h);
        add(tuff, t,h);
        return tuff;
    }

    public void sort(ArrayList<String> t, ArrayList<Integer> h){
        for(int i=0; i< h.size(); i++){
            for (int b = i+1; b<h.size(); b++){
                if(h.get(b) < h.get(i)){
                    int temp = h.get(i);
                    String temp2 = t.get(i);
                    h.set(i,h.get(b));                
                    h.set(b,temp);
                    t.set(i,t.get(b));
                    t.set(b,temp2);
                }
            }
        }
    }

    public void add(ArrayList<Node> tuff, ArrayList<String> t, ArrayList<Integer> h){
        for(int i=0; i<t.size(); i++){
            Node temp = new Node(t.get(i),h.get(i));
            tuff.add(temp);
        }

    }

    public Node extract(ArrayList<Node> tuff){
        Node root = new Node(null,0);
        Tree tree = new Tree();
        int i=1;
        while(tuff.size()>1){
            int rat=tuff.get(i).data+tuff.get(i-1).data;
            Node temp = new Node(null, rat);
            tree.inserth(temp, tuff.get(i-1), tuff.get(i));
            if(i+1==tuff.size()){
                root = temp;
            }
            tuff.remove(i);
            tuff.remove(i-1);
            tuff.add(temp);
            sorth(tuff);
            //print(tuff);
        }
        return root;
    }
    public void print(ArrayList<Node> tuff){
        System.out.println("Curr List:");
        for(int i=0; i<tuff.size(); i++){
            System.out.print(tuff.get(i).data + " ");
        }
    }
    public void sorth(ArrayList<Node> tuff){
        for(int i=0; i< tuff.size(); i++){
            for (int b = i+1; b<tuff.size(); b++){
                if(tuff.get(b).data < tuff.get(i).data){
                    Node temp = new Node(tuff.get(i).let,tuff.get(i).data);
                    tuff.set(i,tuff.get(b));                
                    tuff.set(b,temp);
                }
            }
        }
    }

}

/**
 * Write a description of class Tree here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
import java.util.*;
public class Tree
{
    // instance variables - replace the example below with your own

    public Tree()
    {
        // initialise instance variables
    }
    public void inserth(Node p, Node l, Node r){
        p.left = l;
        p.right = r;
        System.out.println("Root: " + p.data + " Left: " + l.data + " Right: " + r.data);
        if (l.let != null){
            System.out.println(" Left Lett: " + l.let);      
        }
        if (r.let != null){
            System.out.println(" Right Lett: " + r.let);      
        }
    }
    public void huffcode(Node root, HashMap<String,String> vals, String code){
        if(root.left !=null){
            code += "0";
            if(root.left.let !=null){
                vals.put(root.left.let, code);
            }
            if (root.right != null){
                code = code.substring(0,code.length()-1);
            }
            huffcode(root.left, vals, code);
        }
        if(root.right!=null){
            code += "1";
            if(root.right.let !=null){
                vals.put(root.right.let, code);
            }
            huffcode(root.right, vals, code);
        }
    }
    
    public void insert(Node node, int value) {

        /* 1. If the tree is empty, return a new,   
        single node */
        if (value < node.data) {
            if (node.left != null) {
                insert(node.left, value);
            } else {
                System.out.println("  Inserted " + value + " to left of Node " + node.data);
                node.left = new Node("A",value);
            }
        } else if (value > node.data) {
            if (node.right != null) {
                insert(node.right, value);
            } else {
                System.out.println("  Inserted " + value + " to right of Node " + node.data);
                node.right = new Node("A",value);
            }
        }
    }

    public void showvalues(Node root){

        System.out.println("Val: " + root.data + " Lett: " + root.let);
        if (root.left !=null){
            showvalues(root.left);
        }
        if (root.right != null){
            showvalues(root.right);
        }
    }

    public void mid(int[] ml, int low, int high, Node root){
        if(low<high){
            int middle = low + (high - low) / 2;
            // Sort the left side of the array
            insert(root, ml[middle]);
            mid(ml, low, middle, root);

            // Sort the right side of the array
            mid(ml, middle + 1, high, root);
        }
    }

    public void greedy(Node root){
        int value = 129; 
        int rem = value; 
        int c = 0;
        while (rem != 0) {
            c += 1;
            int d = highestdoll(root,rem);
            rem = rem - d;
            System.out.println("Used: " + d + " dollars");
        }
    }

    public boolean find(int value, Node root){
        if (value == root.data){
            System.out.println("Value: " + root.data);
            return true;
        }
        if (root.left != null){
            find(value, root.left);
        }
        if(root.right != null){
            find(value, root.right);
        }
        return false;
    }

    public static int highestdoll(Node root, int value) {
        int d = 1; 
        if (root.data < value) {
            int highest = root.data;
            while (root.data < value && root.right != null) {
                highest = root.data; 
                root = root.right;
            }

            while (root.left != null && root.data > value) {
                root = root.left;
            }

            if (root.data > value) {
                d = highest; 
            } else {
                d = root.data;
            }
        }
        else if (root.data == value) {
            d = root.data;
        }
        else {
            int lowest = root.data; 
            while (root.data > value && root.left != null) {
                lowest = root.left.data;
                root = root.left;
            }

            while (root.right != null & root.data < value) {
                root = root.right;
            }

            if (root.data > value) {
                d = lowest;
            } 
            else {
                d = root.data;
            }
        }
        return d; 
    }

    public void findhighest(Node root){
        int high = root.data;
        if(root.right == null){
            System.out.println("Highest: " + high);
        }

        if (root.right != null && root.right.data > high){
            findhighest(root.right);
        }
    }    
}
